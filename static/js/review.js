document.addEventListener('DOMContentLoaded', function() {
    // Get form data from sessionStorage
    const formData = JSON.parse(sessionStorage.getItem('sarFormData')) || {};
    const reviewContent = document.getElementById('review-content');
    
    // Render review sections
    renderReviewSections(formData);
    
    // Button event listeners
    document.getElementById('edit-btn').addEventListener('click', function() {
        // Redirect to the SAR form page (correct route)
        window.location.href = '/sar_form';
    });
    
    document.getElementById('submit-btn').addEventListener('click', submitForm);
    
    // Replace the existing download button event listener
document.getElementById('download-btn').addEventListener('click', generatePDF);

function generatePDF() {
    const { jsPDF } = window.jspdf;
    const doc = new jsPDF();
    
    // Add title
    doc.setFontSize(18);
    doc.setTextColor(0, 0, 128); // Navy blue
    doc.text('Self Appraisal Report (SAR)', 105, 20, { align: 'center' });
    
    // Add date
    doc.setFontSize(10);
    doc.setTextColor(100);
    doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 105, 30, { align: 'center' });
    
    // Add line separator
    doc.setDrawColor(0, 0, 128);
    doc.setLineWidth(0.5);
    doc.line(20, 35, 190, 35);
    
    // Get all review sections
    const sections = document.querySelectorAll('.review-section');
    let yPosition = 45;
    
    sections.forEach((section, index) => {
        const title = section.querySelector('h2').textContent;
        
        // Add section title
        doc.setFontSize(14);
        doc.setTextColor(0, 0, 0);
        doc.text(title, 20, yPosition);
        yPosition += 10;
        
        // Add section items
        const items = section.querySelectorAll('.review-item');
        items.forEach(item => {
            const label = item.querySelector('label').textContent;
            const value = item.querySelector('p').textContent;
            
            doc.setFontSize(12);
            doc.setTextColor(0, 0, 128);
            doc.text(`${label}:`, 20, yPosition);
            
            doc.setFontSize(11);
            doc.setTextColor(0, 0, 0);
            
            // Split long text into multiple lines
            const splitText = doc.splitTextToSize(value, 160);
            doc.text(splitText, 30, yPosition + 5);
            
            yPosition += 5 + (splitText.length * 5);
        });
        
        // Add space between sections
        yPosition += 10;
        
        // Add new page if we're running out of space
        if (yPosition > 250 && index < sections.length - 1) {
            doc.addPage();
            yPosition = 20;
        }
    });
    
    // Add footer
    doc.setFontSize(10);
    doc.setTextColor(100);
    doc.text('Generated by College Appraisal System', 105, 285, { align: 'center' });
    
    // Save the PDF
    doc.save('SAR_Report.pdf');
}
});

function renderReviewSections(formData) {
    const sections = [
        { id: 'feature-1', title: '1. Teaching Workload' },
        { id: 'feature-2', title: '2. Feedback from Students' },
        { id: 'feature-3', title: '3. Administrative Responsibilities' },
        { id: 'feature-4', title: '4. Evaluation and Assessment' },
        { id: 'feature-5', title: '5. Extension and Outreach Activities' },
        { id: 'feature-6', title: '6. Domain Specific Activities' },
        { id: 'feature-7', title: '7. Student Mentoring' },
        { id: 'feature-8', title: '8. Collaborations' },
        { id: 'feature-9', title: '9. Research Activity' },
        { id: 'feature-10', title: '10. Personal Attributes' }
    ];
    
    const reviewContent = document.getElementById('review-content');
    
    sections.forEach(section => {
        const sectionData = formData[section.id] || {};
        
        // Only show section if it has data
        if (Object.keys(sectionData.data || {}).length > 0) {
            const sectionElement = document.createElement('div');
            sectionElement.className = 'review-section';
            sectionElement.innerHTML = `<h2>${section.title}</h2>`;
            
            // Add data items
            for (const [key, value] of Object.entries(sectionData.data)) {
                if (value && value !== '') {
                    const label = key.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
                    const itemElement = document.createElement('div');
                    itemElement.className = 'review-item';
                    itemElement.innerHTML = `
                        <label>${label}:</label>
                        <p>${value}</p>
                    `;
                    sectionElement.appendChild(itemElement);
                }
            }
            
            // Add files if any
            if (sectionData.files && sectionData.files.length > 0) {
                const filesElement = document.createElement('div');
                filesElement.className = 'review-item';
                filesElement.innerHTML = '<label>Attached Files:</label>';
                
                const filesList = document.createElement('p');
                filesList.innerHTML = sectionData.files.map(file => 
                    `<span class="file-item">${file.name}</span>`
                ).join(', ');
                
                filesElement.appendChild(filesList);
                sectionElement.appendChild(filesElement);
            }
            
            reviewContent.appendChild(sectionElement);
        }
    });
}

async function submitForm() {
    try {
        const formData = JSON.parse(sessionStorage.getItem('sarFormData'));
        const submitBtn = document.getElementById('submit-btn');
        
        if (!formData) {
            alert('No form data found to submit.');
            return;
        }
        
        // Disable button during submission
        submitBtn.disabled = true;
        submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Submitting...';
        
        // Create FormData object for actual submission
        const formDataObj = new FormData();
        formDataObj.append('formData', JSON.stringify(formData));
        
        // Add files to FormData (this would need to be implemented)
        // ...
        
        const response = await fetch('/submit_sar', {
            method: 'POST',
            body: formDataObj
        });
        
        const result = await response.json();
        
        if (result.status === 'success') {
            // Clear session storage after successful submission
            sessionStorage.removeItem('sarFormData');
            
            // Show success message and redirect
            alert('Form submitted successfully!');
            window.location.href = '/sar_form';
        } else {
            throw new Error(result.message || 'Submission failed');
        }
    } catch (error) {
        console.error('Submission error:', error);
        alert(`Submission failed: ${error.message}`);
        
        // Re-enable button
        const submitBtn = document.getElementById('submit-btn');
        submitBtn.disabled = false;
        submitBtn.innerHTML = '<i class="fas fa-check-circle"></i> Confirm Submission';
    }
}
